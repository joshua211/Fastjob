@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Fastjob.Core.Persistence
@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@inject JobService Service;

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

<button @onclick="AddJob" type="button" class="btn btn-primary">Add job</button>
<button @onclick="AddScheduledJob" type="button" class="btn btn-info">Add scheduled job</button>
<button @onclick="AddExceptionJob" type="button" class="btn btn-danger">Add exception job</button>

<div class="job-container">

    <div class="job-list">

        @foreach (var job in openJobs)
        {
            <div class="alert alert-primary" role="alert">
                Job @job is running...
            </div>
        }
    </div>


    <div class="job-list">

        @foreach (var job in completedJobs)
        {
            <div class="alert alert-success" role="alert">
                Job @job has run to completion!
            </div>
        }
    </div>

</div>


@code
{
    private HubConnection? hubConnection;
    private List<string> openJobs = new();
    private List<string> completedJobs = new();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/jobs"))
            .Build();

        hubConnection.On<string>("CompleteJob", (jobId) =>
        {
            openJobs.Remove(jobId);
            completedJobs.Add(jobId);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public async Task AddJob()
    {
        var id = JobId.New.Value;
        openJobs.Add(id);
        await Service.AddJob(id);
    }

    public async Task AddScheduledJob()
    {
        var id = JobId.New.Value;
        var timespan = TimeSpan.FromSeconds(5);
        openJobs.Add(id);
        await Service.AddScheduledJob(id, timespan);
    }

    private async Task AddExceptionJob()
    {
        var id = JobId.New.Value;
        await Service.AddExceptionJob(id);
    }
}

